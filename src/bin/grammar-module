#!/usr/bin/env python
"""

Usage:
        grammar.module grammar/lang.yaml

"""
import sys
from warnings import warn

import yaml
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader

sys.path.insert(0, '..')

from cdent.grammar import *

class GrammarModule():
    def __init__(self, path):
        def multi_constructor(loader, node):
            warn(node)
#             obj = getattr(cdent.ast, 'ast_' + type)()
#             obj.__dict__.update(loader.construct_mapping(node))
            return node.value[::-1]
            return node

        Loader.add_constructor(
            u'tag:yaml.org,2002:str',
            multi_constructor
        )
#         Loader.add_multi_constructor(
#             u'tag:yaml.org,2002:',
#             multi_constructor
#         )

        self.grammar = yaml.load(file(path))

    def generate_module(self, lang):
        Lang = lang[0].upper() + lang[1:]
        data = self.grammar

        module = """\
\"\"\"
C'Dent %(Lang)s parser grammar module.
\"\"\"
""" % locals()

        if lang != 'base':
            module += """
from cdent.parser.base.grammar import Grammar as Base
""" % locals()
            base = 'Base'
        else:
            base = 'object'

        module += """
class Grammar(%(base)s):
    def __init__(self):
        self.__dict__.update(%(data)s)
""" % locals()
 
        return module

if __name__ == '__main__':
    if len(sys.argv) != 2:
        raise Exception(__doc__)
    grammar_file = sys.argv[1]
    lang = grammar_file[8:-5]
    print GrammarModule(grammar_file).generate_module(lang)
